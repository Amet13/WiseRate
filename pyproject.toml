[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "WiseRate"
version = "2.4.0"
description = "Modern CLI tool for monitoring favorable currency exchange rates"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Amet13"}
]
keywords = ["currency", "exchange", "rates", "WiseRate", "cli", "monitoring"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.14",
    "Topic :: Office/Business :: Financial",
]
requires-python = ">=3.14"
dependencies = [
    "httpx>=0.28.0",
    "pydantic>=2.12.0",
    "structlog>=25.4.0",
    "click>=8.1.0",
    "rich>=14.1.0",
    "aiofiles>=24.1.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.4.0",
    "pytest-asyncio>=1.1.0",
    "pytest-cov>=6.0.0",
    "pytest-mock>=3.14.0",
    "black>=25.1.0",
    "isort>=6.0.0",
    "ruff>=0.8.0",
    "mypy>=1.17.0",
    "pyright>=1.1.0",
    "pre-commit>=4.3.0",
    "coverage[toml]>=7.6.0",
]

[project.scripts]
wiserate = "wiserate.cli:main"

[project.urls]
Homepage = "https://github.com/Amet13/WiseRate"
Repository = "https://github.com/Amet13/WiseRate"
Issues = "https://github.com/Amet13/WiseRate/issues"

[tool.hatch.build.targets.wheel]
packages = ["src/wiserate"]

[tool.uv]
# uv configuration for faster dependency resolution
managed = true

[tool.black]
line-length = 100
target-version = ['py314']

[tool.isort]
profile = "black"
multi_line_output = 3

[tool.mypy]
python_version = "3.14"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
no_implicit_optional = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "click.*",
    "rich.*",
    "structlog.*",
    "httpx.*",
    "aiofiles.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "-v"
asyncio_mode = "auto"

[tool.coverage.run]
# Coverage configuration
source = ["src/wiserate"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
    "*/site-packages/*",
    "*/venv/*",
    "*/env/*",
    "src/wiserate/logging_config.py",  # Config code, difficult to test
]

[tool.coverage.report]
# Coverage report settings
precision = 2
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "if sys.version_info",
    "if 0:",
    "if False:",
    "@abstractmethod",
    "@abc.abstractmethod",
    "@overload",
]

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.xml]
output = "coverage.xml"

[tool.ruff]
# Ruff configuration - fast Python linter written in Rust
line-length = 100
target-version = "py314"

[tool.ruff.lint]
# Ruff lint rules
select = [
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings
    "F",      # pyflakes
    "I",      # isort
    "B",      # flake8-bugbear
    "C4",     # flake8-comprehensions
    "UP",     # pyupgrade
    "ARG",    # flake8-unused-arguments
    "SIM",    # flake8-simplify
    "TCH",    # flake8-type-checking
    "PTH",    # flake8-use-pathlib
]
ignore = [
    "E501",   # line too long (handled by black)
    "B008",   # do not perform function calls in argument defaults
    "C901",   # too complex
    "TCH001", # type-checking imports (we use runtime imports for click decorators)
    "TCH002", # type-checking imports
    "TCH003", # type-checking imports
    "ARG001", # unused arguments (click requires ctx parameter)
    "B017",   # blind exception in tests (acceptable for pytest.raises)
    "B904",   # raise from None (acceptable for our error handling)
]

[tool.ruff.lint.isort]
# Configure isort via ruff
known-first-party = ["wiserate"]

[tool.ruff.lint.per-file-ignores]
# Ignore specific rules for specific files
"__init__.py" = ["F401"]  # unused imports allowed in __init__
"tests/**/*.py" = ["ARG", "S101"]  # allow unused args and assert in tests

[tool.pyright]
# Pyright configuration for additional type checking
pythonVersion = "3.14"
pythonPlatform = "All"
typeCheckingMode = "basic"
reportMissingImports = true
reportMissingTypeStubs = false
exclude = [
    "**/node_modules",
    "**/__pycache__",
    ".venv",
    "venv",
    "build",
    "dist",
]
